-- this module is for the "inscribed" data type, basically any other
-- type with a string to describe it. I will use it for logging the history
-- of player's actions in the play page, and giving the operations
-- in the level page a name so that I can display them on buttons later


module Inscribed exposing (..)


type Inscribed a
    = Inscribed a String


extractMessage : Inscribed a -> String
extractMessage (Inscribed _ msg) =
    msg


extractValue : Inscribed a -> a
extractValue (Inscribed val _) =
    val



-- this function basically adds a message generated by another
-- function to an already existing inscribed thing


bind : (a -> Inscribed b) -> Inscribed a -> Inscribed b
bind fn (Inscribed oldValue oldMessage) =
    let
        -- unfortunately elm doesn't let me directly pattern match here
        newInscribed =
            fn oldValue

        (Inscribed newValue newMessage) =
            newInscribed
    in
    Inscribed newValue (oldMessage ++ newMessage)
